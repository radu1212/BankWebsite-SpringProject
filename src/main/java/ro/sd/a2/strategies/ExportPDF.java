package ro.sd.a2.strategies;

import org.springframework.beans.factory.annotation.Autowired;
import ro.sd.a2.entity.Transaction;

import java.util.List;
import java.io.FileOutputStream;
import java.util.Date;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

public class ExportPDF implements ExportStrategy {
    private static String FILE = "C:\\Users\\Radu\\Desktop\\PDF_export.pdf";
    private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
            Font.BOLD);
    private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
            Font.NORMAL, BaseColor.RED);
    private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
            Font.BOLD);
    private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
            Font.BOLD);

    /**
     * the class used to implement the strategy design pattern if the strategy chosen is export via PDF
     * @param transactions - list of transactions to be exported
     * @param from - the date representing the beginning of the range
     * @param to - the date representing the end of the range
     */
    @Override
    public void export(List<Transaction> transactions, String from, String to) {
        try {
            Document document = new Document();
            PdfWriter.getInstance(document, new FileOutputStream(FILE));
            document.open();
            addMetaData(document);
            addTitlePage(document);
            addContent(document, transactions, from, to);
            document.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void addMetaData(Document document) {
        document.addTitle("Recent transactions");
        document.addAuthor("Simina Radu");
        document.addCreator("Simina Radu");
    }

    private static void addTitlePage(Document document)
            throws DocumentException {
        Paragraph preface = new Paragraph();
        // We add one empty line
        addEmptyLine(preface, 1);
        // Lets write a big header
        preface.add(new Paragraph("Recent transactions", catFont));

        addEmptyLine(preface, 1);
        // Will create: Report generated by: _name, _date
        preface.add(new Paragraph(
                "Report generated by: " + System.getProperty("user.name") + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                smallBold));
        addEmptyLine(preface, 3);
        preface.add(new Paragraph(
                "This document presents the requested past transactions by the user. ",
                smallBold));

        addEmptyLine(preface, 8);

        preface.add(new Paragraph(
                "This document represents just a shallow copy of your past transactions. This can not be used as a proof of purchase.",
                redFont));

        document.add(preface);
        // Start a new page
        document.newPage();
    }

    private static void addContent(Document document , List<Transaction> transactions, String from, String to) throws DocumentException {

        Paragraph subPara = new Paragraph("Below are the requested transactions for: " + transactions.get(0).getBankAccount().getUser().getUsername(), subFont);
        subPara.add(new Paragraph("This transactions were made between " + from + " and " + to + ", from the following account: " + transactions.get(0).getBankAccount().getIban()));

        // add a list
        Paragraph paragraph = new Paragraph();
        addEmptyLine(paragraph, 5);
        subPara.add(paragraph);

        // add a table
        createTable(subPara, transactions);

        // now add all this to the document
        document.add(subPara);
    }

    private static void createTable(Paragraph paragraph, List<Transaction> transactions)
            throws BadElementException {
        PdfPTable table = new PdfPTable(4);

        PdfPCell c1 = new PdfPCell(new Phrase("Type"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Recipient"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Value"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Date"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);
        table.setHeaderRows(1);

        for(Transaction transaction : transactions){
            table.addCell(transaction.getType());
            table.addCell(transaction.getRecipient());
            table.addCell(transaction.getValue().toString());
            table.addCell(transaction.getDate());
        }
        paragraph.add(table);
    }

    private static void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }
}
